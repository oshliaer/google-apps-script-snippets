class ChunkyCache {
  constructor(cache) {
    (this.cache = cache || CacheService.getScriptCache()), (this.chunkSize = 102400);
  }
  get(superKeyjson) {
    superKeyjson = this.cache.get(superKeyjson);
    if (null === superKeyjson) return null;
    const superKey = JSON.parse(superKeyjson),
      cache = this.cache.getAll(superKey.chunks),
      chunks = superKey.chunks.map((key) => cache[key]);
    return chunks.every(function (c) {
      return void 0 !== c;
    })
      ? JSON.parse(chunks.join(''))
      : void 0;
  }
  put(key, superKey, expirationInSeconds = 600) {
    const json = JSON.stringify(superKey),
      chunks = [],
      chunkValues = {};
    let index = 0;
    for (; index < json.length; ) {
      var chunkKey = key + '_' + index;
      chunks.push(chunkKey), (chunkValues[chunkKey] = json.substr(index, this.chunkSize)), (index += this.chunkSize);
    }
    superKey = {
      chunkSize: this.chunkSize,
      chunks: chunks,
      length: json.length,
    };
    (chunkValues[key] = JSON.stringify(superKey)), this.cache.putAll(chunkValues, expirationInSeconds);
  }
  remove(key) {
    var superKey = this.cache.get(key);
    return (
      null !== superKey && ((superKey = JSON.parse(superKey)), this.cache.removeAll([...superKey.chunks, key])), null
    );
  }
}

class BlobCache extends ChunkyCache {
  constructor(cache) {
    super(cache),
      (this.splitter = '1c16c2eb-a4a7-4cac-bf79-064cedfbb346'),
      (this.defaultName = '772fff0c-4207-4893-834c-aec73c498eeb'),
      (this.prefixSize = 250);
  }
  putBlob(key, data, expirationInSeconds = 600) {
    let name = data.getName();
    null === name && (name = this.defaultName);
    const contentType = data.getContentType();
    data =
      [name, this.splitter, contentType, this.splitter].join('').padEnd(this.prefixSize, ' ') +
      Utilities.base64Encode(data.getBytes());
    this.put(key, data, expirationInSeconds);
  }
  getBlob(prefix) {
    const data = this.get(prefix);
    if (null === data) return null;
    {
      prefix = data.slice(0, this.prefixSize).split(this.splitter);
      const blob = Utilities.newBlob('');
      return (
        blob.setBytes(Utilities.base64Decode(data.slice(this.prefixSize))),
        prefix[0] !== this.defaultName && blob.setName(prefix[0]),
        blob.setContentType(prefix[2]),
        blob
      );
    }
  }
}
